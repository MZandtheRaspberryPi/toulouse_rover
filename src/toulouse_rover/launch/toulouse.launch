<launch>

   <arg name="autonomous_mode" default="true" />
   <arg name="launch_battery_monitor" default="false" />
   <arg name="wheel_namespace" default="wheels" />
   <arg name="wheel_config_type" default="differential_drive" />
   <arg name="speed_controller_loop_rate" default="5.0" />
   

  <param name="wheel_namespace" type="str" value="$(arg wheel_namespace)" />
  <param name="wheel_config_type" type="str" value="$(arg wheel_config_type)" />
  <param name="speed_controller_loop_rate" type="double" value="$(arg speed_controller_loop_rate)" />
  <param name="speed_controller_use_pid" type="bool" value="false" />

  <env name="ROSCONSOLE_CONFIG_FILE"
        value="$(find toulouse_rover)/param/rosconsole.config"/>

  <node pkg="toulouse_rover" name="serial_motor_driver" type="serial_motor_driver.py" output="screen">  </node>

  <node pkg="rosserial_python" name="serial_node" type="serial_node.py" if="$(arg launch_battery_monitor)" output="screen" args="_port:=/dev/ttyUSB0 _baud:=57600">
  </node>
  
  <node pkg="toulouse_rover" name="wheel_speed_calculator_node" type="wheel_speed_calculator_node"  output="screen"> </node>

  <node pkg="toulouse_rover" name="wheel_speed_controller_node" type="wheel_speed_controller_node"  output="screen"> </node>

  <!-- -->
  <node pkg="toulouse_rover" name="odom_calculator_node" type="odom_calculator_node"  output="screen">
    <param name="odom_topic" value="odom_wheels" />
    <param name="odom_frame_id" value="odom_wheels" />
  </node>


  <!-- -->
  <include file="$(find ydlidar_ros)/launch/X4.launch" if="$(arg autonomous_mode)">
    <arg name="port_lidar" value="/dev/ttyUSB0" />
  </include>

  <!-- loading urdf model of robot -->
  <param name="robot_description" textfile="$(find toulouse_rover)/urdf/toulouse.urdf.xacro"/>
  
  <node pkg="joint_state_publisher" type="joint_state_publisher" name="joint_state_publisher" />
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" />


  <!-- Run the map server
  <node name="map_server" pkg="map_server" type="map_server" args="$(find toulouse_rover)/maps/map_mz_room.yaml" if="$(arg autonomous_mode)" /> 
  -->

  <!-- Run AMCL
  <include file="$(find amcl)/examples/amcl_diff.launch" if="$(arg autonomous_mode)"  >
  </include> 
  -->


  <arg name="tf_map_scanmatch_transform_frame_name" default="scanmatcher_frame"/>
  <arg name="base_frame" default="base_link"/>
  <arg name="odom_frame" default="base_link"/>
  <arg name="pub_map_odom_transform" default="true"/>
  <arg name="scan_subscriber_queue_size" default="5"/>
  <arg name="scan_topic" default="scan"/>
  <arg name="map_size" default="2048"/>

  <arg name="geotiff_map_file_path" default="$(find hector_geotiff)/maps"/>
  <param name="/use_sim_time" value="false"/>

  <include file="$(find hector_geotiff_launch)/launch/geotiff_mapper.launch">
    <arg name="trajectory_source_frame_name" value="scanmatcher_frame"/>
    <arg name="map_file_path" value="$(arg geotiff_map_file_path)"/>
  </include>  

  <node pkg="hector_mapping" type="hector_mapping" name="hector_mapping" output="screen">
    
    <!-- Frame names -->
    <param name="map_frame" value="map" />
    <param name="base_frame" value="$(arg base_frame)" />
    <param name="odom_frame" value="$(arg odom_frame)" />
    
    <!-- Tf use -->
    <param name="use_tf_scan_transformation" value="true"/>
    <param name="use_tf_pose_start_estimate" value="false"/>
    <param name="pub_map_odom_transform" value="$(arg pub_map_odom_transform)"/>
    
    <!-- Map size / start point -->
    <param name="map_resolution" value="0.050"/>
    <param name="map_size" value="$(arg map_size)"/>
    <param name="map_start_x" value="0.5"/>
    <param name="map_start_y" value="0.5" />
    <param name="map_multi_res_levels" value="2" />
    
    <!-- Map update parameters -->
    <param name="update_factor_free" value="0.4"/>
    <param name="update_factor_occupied" value="0.9" />    
    <param name="map_update_distance_thresh" value="0.4"/>
    <param name="map_update_angle_thresh" value="0.06" />
    <param name="laser_z_min_value" value = "-1.0" />
    <param name="laser_z_max_value" value = "1.0" />
    
    <!-- Advertising config --> 
    <param name="advertise_map_service" value="true"/>
    
    <param name="scan_subscriber_queue_size" value="$(arg scan_subscriber_queue_size)"/>
    <param name="scan_topic" value="$(arg scan_topic)"/>
    
    <!-- Debug parameters -->
    <!--
      <param name="output_timing" value="false"/>
      <param name="pub_drawings" value="true"/>
      <param name="pub_debug_output" value="true"/>
    -->
    <param name="tf_map_scanmatch_transform_frame_name" value="$(arg tf_map_scanmatch_transform_frame_name)" />
  </node>


 <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen" if="$(arg autonomous_mode)">
    <rosparam file="$(find toulouse_rover)/param/costmap_common_params.yaml" command="load" ns="global_costmap" /> 
    <rosparam file="$(find toulouse_rover)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find toulouse_rover)/param/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find toulouse_rover)/param/global_costmap_params.yaml" command="load" /> 
    <rosparam file="$(find toulouse_rover)/param/base_local_planner_params.yaml" command="load" />
 </node>


</launch>
